import streamlit as st
import pandas as pd


st.set_page_config(
    page_title= "Titanic Random Forest"
)
# Load d·ªØ li·ªáu
raw_data_file = "../data/data.csv"  
processed_data_file = "../data/processed_data.csv"  
result_file = "../data/model_results.csv"  
smote_file = "../data/smote_data.csv"
nearmiss_file = "../data/nearmiss_data.csv"


df_raw = pd.read_csv(raw_data_file)
df_processed = pd.read_csv(processed_data_file)
df_results = pd.read_csv(result_file)
df_smote = pd.read_csv(smote_file)
df_nearmiss = pd.read_csv(nearmiss_file)

st.sidebar.title("Menu")
page = st.sidebar.radio("Ch·ªçn ph·∫ßn hi·ªÉn th·ªã", ["D·ªØ li·ªáu g·ªëc", "D·ªØ li·ªáu sau ti·ªÅn x·ª≠ l√Ω", "D·ªØ li·ªáu SMOTE", "D·ªØ li·ªáu Nearmiss", "K·∫øt qu·∫£ m√¥ h√¨nh"])

if page == "D·ªØ li·ªáu g·ªëc":
    st.title("D·ªØ li·ªáu g·ªëc")
    st.write(f"S·ªë d√≤ng: {df_raw.shape[0]} | S·ªë c·ªôt: {df_raw.shape[1]}")
    st.dataframe(df_raw)
    if "Survived" in df_raw.columns:
        st.subheader("Ph√¢n b·ªë l·ªõp trong d·ªØ li·ªáu g·ªëc:")
        class_counts = df_raw["Survived"].value_counts().reset_index()
        class_counts.columns = ["L·ªõp", "S·ªë l∆∞·ª£ng"]
        st.table(class_counts)

elif page == "D·ªØ li·ªáu SMOTE":
    st.title("D·ªØ li·ªáu SMOTE")
    st.write(f"S·ªë d√≤ng: {df_smote.shape[0]} | S·ªë c·ªôt: {df_smote.shape[1]}")
    st.dataframe(df_smote)
    if "Survived" in df_smote.columns:
        st.subheader(" Ph√¢n b·ªë l·ªõp trong d·ªØ li·ªáu g·ªëc:")
        class_counts = df_smote["Survived"].value_counts().reset_index()
        class_counts.columns = ["L·ªõp", "S·ªë l∆∞·ª£ng"]
        st.table(class_counts)

elif page == "D·ªØ li·ªáu Nearmiss":
    st.title("D·ªØ li·ªáu Nearmiss")
    st.write(f"S·ªë d√≤ng: {df_nearmiss.shape[0]} | S·ªë c·ªôt: {df_nearmiss.shape[1]}")
    st.dataframe(df_nearmiss)
    if "Survived" in df_nearmiss.columns:
        st.subheader("Ph√¢n b·ªë l·ªõp trong d·ªØ li·ªáu g·ªëc:")
        class_counts = df_nearmiss["Survived"].value_counts().reset_index()
        class_counts.columns = ["L·ªõp", "S·ªë l∆∞·ª£ng"]
        st.table(class_counts)


elif page == "D·ªØ li·ªáu sau ti·ªÅn x·ª≠ l√Ω":
    st.title("D·ªØ li·ªáu sau ti·ªÅn x·ª≠ l√Ω")
    st.write(f"S·ªë d√≤ng: {df_processed.shape[0]} | S·ªë c·ªôt: {df_processed.shape[1]}")
    st.dataframe(df_processed)
    if "Survived" in df_processed.columns:
        st.subheader("Ph√¢n b·ªë l·ªõp trong d·ªØ li·ªáu g·ªëc:")
        class_counts = df_processed["Survived"].value_counts().reset_index()
        class_counts.columns = ["L·ªõp", "S·ªë l∆∞·ª£ng"]
        st.table(class_counts)

elif page == "K·∫øt qu·∫£ m√¥ h√¨nh":
    st.title("K·∫øt qu·∫£ hu·∫•n luy·ªán m√¥ h√¨nh Random Forest")
    method_selected = st.selectbox("üõ† Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω d·ªØ li·ªáu:", df_results["Method"].unique())

    # L·ªçc d·ªØ li·ªáu theo ph∆∞∆°ng ph√°p
    df_filtered = df_results[df_results["Method"] == method_selected]

    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
    st.subheader(f"K·∫øt qu·∫£ cho ph∆∞∆°ng ph√°p: {method_selected}")
    st.dataframe(df_filtered)

    # N√∫t t·∫£i file k·∫øt qu·∫£
    st.download_button(
        label= "T·∫£i file k·∫øt qu·∫£",
        data=df_results.to_csv(index=False),
        file_name="model_results.csv",
        mime="text/csv"
    )